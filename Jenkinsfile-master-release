#!/usr/bin/env groovy

def releaseVersion
def releaseBranch

pipeline {
    agent any

    tools {
        maven "maven3"
    }

    stages {
        stage('Init') {
            steps {
                configFileProvider([configFile(fileId: '75d7a907-05a7-49c4-8ca4-ecfc124b4afb', targetLocation: 'settings.xml')]) {
                    sh 'mkdir -p ~/.m2 && cp $WORKSPACE/settings.xml -f ~/.m2/settings.xml'
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare version') {
            steps {
                // Drop -SNAPSHOT qualifier
                sh 'mvn versions:set -DremoveSnapshot versions:commit'

                // Release version
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    releaseVersion = pom.version
                }
                echo "Release version: ${releaseVersion}"

                // Release branch
                script {
                    releaseBranch = "release/${releaseVersion}"
                }
                echo "Release branch: ${releaseBranch}"
            }
        }

        stage('Branch') {
            steps {
                withCredentials([usernamePassword(credentialsId: '1ceac7f5-808a-456d-b758-2da186f29ac4', variable: 'GITHUB_TOKEN')]) {
                    // Create release branch
                    sh "git checkout -b ${releaseBranch}"
                    sh "git commit -a -m \"New release ${releaseVersion}\""
                    sh "git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/sip3io/sip3-parent.git ${releaseBranch}"
                }
            }
        }

        stage('Release') {
            steps {
                // Add tag
                withCredentials([usernamePassword(credentialsId: '1ceac7f5-808a-456d-b758-2da186f29ac4', variable: 'GITHUB_TOKEN')]) {
                    sh "git tag ${releaseVersion}"
                    sh('git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/sip3io/sip3-parent.git --tags')
                }

                // Deploy to internal artifactory
                sh 'mvn clean deploy:deploy -DaltDeploymentRepository=archiva.internal::default::${ARTIFACTORY_URI}'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
